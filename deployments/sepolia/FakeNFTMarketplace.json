{
  "address": "0x06BA9e7E2434Fdc58ca077dB84437dA34D9f9400",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xce15e5f82567b986bc9276100e2e670997f5574a62b493d4ed8dbe44d43ca144",
  "receipt": {
    "to": null,
    "from": "0x9B3f704349BDA68EaCc8d9D5498d1D2FEAf92a3c",
    "contractAddress": "0x06BA9e7E2434Fdc58ca077dB84437dA34D9f9400",
    "transactionIndex": 98,
    "gasUsed": "304725",
    "logsBloom": "0x
    "blockHash": "0x5d2f6a1a93cc1d75aa9e19a3a047d04d9782e7ea7fb036fe13866d4338b41347",
    "transactionHash": "0xce15e5f82567b986bc9276100e2e670997f5574a62b493d4ed8dbe44d43ca144",
    "logs": [],
    "blockNumber": 3194251,
    "cumulativeGasUsed": "5766062",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a517b8290f819279ba2edd629c4c48a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"available(uint256)\":{\"details\":\"available() checks whether the given tokenId has already been sold or not\",\"params\":{\"_tokenId\":\"- the tokenId to check for\"}},\"purchase(uint256)\":{\"details\":\"purchase() accepts ETH and marks the owner of the given tokenId as the caller address\",\"params\":{\"_tokenId\":\"- the fake NFT token Id to purchase\"}}},\"stateVariables\":{\"nftPrice\":{\"details\":\"Set the purchase price for each Fake NFT\"},\"tokens\":{\"details\":\"Maintain a mapping of Fake TokenID to Owner addresses\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FakeNFTMarketplace.sol\":\"FakeNFTMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FakeNFTMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ncontract FakeNFTMarketplace {\\n    /// @dev Maintain a mapping of Fake TokenID to Owner addresses\\n    mapping(uint256 => address) public tokens;\\n    /// @dev Set the purchase price for each Fake NFT\\n    uint256 public nftPrice = 0.1 ether;\\n\\n    /// @dev purchase() accepts ETH and marks the owner of the given tokenId as the caller address\\n    /// @param _tokenId - the fake NFT token Id to purchase\\n    function purchase(uint256 _tokenId) external payable {\\n        require(msg.value >= nftPrice, \\\"This NFT costs 0.1 ether\\\");\\n        tokens[_tokenId] = msg.sender;\\n    }\\n\\n    /// @dev available() checks whether the given tokenId has already been sold or not\\n    /// @param _tokenId - the tokenId to check for\\n    function available(uint256 _tokenId) external view returns (bool) {\\n        // address(0) = 0x0000000000000000000000000000000000000000\\n        // This is the default value for addresses in Solidity\\n        if (tokens[_tokenId] == address(0)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x7fc62808c8fe1b241646ade2564c57ad6c9cf9e279cadcbc6add01b56afa77cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405267016345785d8a000060015534801561001c57600080fd5b506104288061002c6000396000f3fe60806040526004361061003f5760003560e01c80630d39fc81146100445780634f64b2be1461006f57806396e494e8146100ac578063efef39a1146100e9575b600080fd5b34801561005057600080fd5b50610059610105565b604051610066919061026a565b60405180910390f35b34801561007b57600080fd5b50610096600480360381019061009191906102b6565b61010b565b6040516100a39190610324565b60405180910390f35b3480156100b857600080fd5b506100d360048036038101906100ce91906102b6565b61013e565b6040516100e0919061035a565b60405180910390f35b61010360048036038101906100fe91906102b6565b6101b8565b005b60015481565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101ae57600190506101b3565b600090505b919050565b6001543410156101fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f4906103d2565b60405180910390fd5b3360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000819050919050565b61026481610251565b82525050565b600060208201905061027f600083018461025b565b92915050565b600080fd5b61029381610251565b811461029e57600080fd5b50565b6000813590506102b08161028a565b92915050565b6000602082840312156102cc576102cb610285565b5b60006102da848285016102a1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061030e826102e3565b9050919050565b61031e81610303565b82525050565b60006020820190506103396000830184610315565b92915050565b60008115159050919050565b6103548161033f565b82525050565b600060208201905061036f600083018461034b565b92915050565b600082825260208201905092915050565b7f54686973204e465420636f73747320302e312065746865720000000000000000600082015250565b60006103bc601883610375565b91506103c782610386565b602082019050919050565b600060208201905081810360008301526103eb816103af565b905091905056fea26469706673582212209c37d1e1b918e232d625a8d8a5a6dd7103bb2333dcc907b488cdd9022d3416e164736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80630d39fc81146100445780634f64b2be1461006f57806396e494e8146100ac578063efef39a1146100e9575b600080fd5b34801561005057600080fd5b50610059610105565b604051610066919061026a565b60405180910390f35b34801561007b57600080fd5b50610096600480360381019061009191906102b6565b61010b565b6040516100a39190610324565b60405180910390f35b3480156100b857600080fd5b506100d360048036038101906100ce91906102b6565b61013e565b6040516100e0919061035a565b60405180910390f35b61010360048036038101906100fe91906102b6565b6101b8565b005b60015481565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101ae57600190506101b3565b600090505b919050565b6001543410156101fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f4906103d2565b60405180910390fd5b3360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000819050919050565b61026481610251565b82525050565b600060208201905061027f600083018461025b565b92915050565b600080fd5b61029381610251565b811461029e57600080fd5b50565b6000813590506102b08161028a565b92915050565b6000602082840312156102cc576102cb610285565b5b60006102da848285016102a1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061030e826102e3565b9050919050565b61031e81610303565b82525050565b60006020820190506103396000830184610315565b92915050565b60008115159050919050565b6103548161033f565b82525050565b600060208201905061036f600083018461034b565b92915050565b600082825260208201905092915050565b7f54686973204e465420636f73747320302e312065746865720000000000000000600082015250565b60006103bc601883610375565b91506103c782610386565b602082019050919050565b600060208201905081810360008301526103eb816103af565b905091905056fea26469706673582212209c37d1e1b918e232d625a8d8a5a6dd7103bb2333dcc907b488cdd9022d3416e164736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "available(uint256)": {
        "details": "available() checks whether the given tokenId has already been sold or not",
        "params": {
          "_tokenId": "- the tokenId to check for"
        }
      },
      "purchase(uint256)": {
        "details": "purchase() accepts ETH and marks the owner of the given tokenId as the caller address",
        "params": {
          "_tokenId": "- the fake NFT token Id to purchase"
        }
      }
    },
    "stateVariables": {
      "nftPrice": {
        "details": "Set the purchase price for each Fake NFT"
      },
      "tokens": {
        "details": "Maintain a mapping of Fake TokenID to Owner addresses"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 510,
        "contract": "contracts/FakeNFTMarketplace.sol:FakeNFTMarketplace",
        "label": "tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 514,
        "contract": "contracts/FakeNFTMarketplace.sol:FakeNFTMarketplace",
        "label": "nftPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}