{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/CryptoDevsDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ICryptoDevsNFT.sol\";\nimport \"./interfaces/IFakeNFTMarketplace.sol\";\n\n// Replace this line with the Interfaces\ncontract CryptoDevsDAO is Ownable {\n    // Create an enum named Vote containing possible options for a vote\n    enum Vote {\n        YAY, // YAY = 0\n        NAY // NAY = 1\n    }\n\n    struct Proposal {\n        // nftTokenId - the tokenID of the NFT to purchase from FakeNFTMarketplace if the proposal passes\n        uint256 nftTokenId;\n        // deadline - the UNIX timestamp until which this proposal is active. Proposal can be executed after the deadline has been exceeded.\n        uint256 deadline;\n        // yayVotes - number of yay votes for this proposal\n        uint256 yayVotes;\n        // nayVotes - number of nay votes for this proposal\n        uint256 nayVotes;\n        // executed - whether or not this proposal has been executed yet. Cannot be executed before the deadline has been exceeded.\n        bool executed;\n        // voters - a mapping of CryptoDevsNFT tokenIDs to booleans indicating whether that NFT has already been used to cast a vote or not\n        mapping(uint256 => bool) voters;\n    }\n\n    // Create a mapping of ID to Proposal\n    mapping(uint256 => Proposal) public proposals;\n    // Number of proposals that have been created\n    uint256 public numProposals;\n\n    IFakeNFTMarketplace nftMarketplace;\n    ICryptoDevsNFT cryptoDevsNFT;\n\n    // Create a modifier which only allows a function to be\n    // called by someone who owns at least 1 CryptoDevsNFT\n    modifier nftHolderOnly() {\n        require(cryptoDevsNFT.balanceOf(msg.sender) > 0, \"NOT_A_DAO_MEMBER\");\n        _;\n    }\n\n    // Create a modifier which only allows a function to be\n    // called if the given proposals' deadline HAS been exceeded\n    // and if the proposal has not yet been executed\n    modifier inactiveProposalOnly(uint256 proposalIndex) {\n        require(\n            proposals[proposalIndex].deadline <= block.timestamp,\n            \"DEADLINE_NOT_EXCEEDED\"\n        );\n        require(\n            proposals[proposalIndex].executed == false,\n            \"PROPOSAL_ALREADY_EXECUTED\"\n        );\n        _;\n    }\n\n    // Create a modifier which only allows a function to be\n    // called if the given proposal's deadline has not been exceeded yet\n    modifier activeProposalOnly(uint256 proposalIndex) {\n        require(\n            proposals[proposalIndex].deadline > block.timestamp,\n            \"DEADLINE_EXCEEDED\"\n        );\n        _;\n    }\n\n    // Create a payable constructor which initializes the contract\n    // instances for FakeNFTMarketplace and CryptoDevsNFT\n    // The payable allows this constructor to accept an ETH deposit when it is being deployed\n    constructor(address _nftMarketplace, address _cryptoDevsNFT) payable {\n        nftMarketplace = IFakeNFTMarketplace(_nftMarketplace);\n        cryptoDevsNFT = ICryptoDevsNFT(_cryptoDevsNFT);\n    }\n\n    // The following two functions allow the contract to accept ETH deposits\n    // directly from a wallet without calling a function\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    function createProposal(\n        uint256 _nftTokenId\n    ) external nftHolderOnly returns (uint256) {\n        require(nftMarketplace.available(_nftTokenId), \"NFT_NOT_FOR_SALE\");\n        Proposal storage proposal = proposals[numProposals];\n        proposal.nftTokenId = _nftTokenId;\n        // Set the proposal's voting deadline to be (current time + 5 minutes)\n        proposal.deadline = block.timestamp + 5 minutes;\n\n        numProposals++;\n\n        return numProposals - 1;\n    }\n\n    function voteOnProposal(\n        uint256 proposalIndex,\n        Vote vote\n    ) external nftHolderOnly activeProposalOnly(proposalIndex) {\n        Proposal storage proposal = proposals[proposalIndex];\n\n        uint256 voterNFTBalance = cryptoDevsNFT.balanceOf(msg.sender);\n        uint256 numVotes = 0;\n\n        // Calculate how many NFTs are owned by the voter\n        // that haven't already been used for voting on this proposal\n        for (uint256 i = 0; i < voterNFTBalance; i++) {\n            uint256 tokenId = cryptoDevsNFT.tokenOfOwnerByIndex(msg.sender, i);\n            if (proposal.voters[tokenId] == false) {\n                numVotes++;\n                proposal.voters[tokenId] = true;\n            }\n        }\n        require(numVotes > 0, \"ALREADY_VOTED\");\n\n        if (vote == Vote.YAY) {\n            proposal.yayVotes += numVotes;\n        } else {\n            proposal.nayVotes += numVotes;\n        }\n    }\n\n    /// @dev executeProposal allows any CryptoDevsNFT holder to execute a proposal after it's deadline has been exceeded\n    /// @param proposalIndex - the index of the proposal to execute in the proposals array\n    function executeProposal(\n        uint256 proposalIndex\n    ) external nftHolderOnly inactiveProposalOnly(proposalIndex) {\n        Proposal storage proposal = proposals[proposalIndex];\n\n        // If the proposal has more YAY votes than NAY votes\n        // purchase the NFT from the FakeNFTMarketplace\n        if (proposal.yayVotes > proposal.nayVotes) {\n            uint256 nftPrice = nftMarketplace.getPrice();\n            require(address(this).balance >= nftPrice, \"NOT_ENOUGH_FUNDS\");\n            nftMarketplace.purchase{value: nftPrice}(proposal.nftTokenId);\n        }\n        proposal.executed = true;\n    }\n\n    function withdrawEther() external onlyOwner {\n        uint256 amount = address(this).balance;\n        require(amount > 0, \"Nothing to withdraw, contract balance empty\");\n        (bool sent, ) = payable(owner()).call{value: amount}(\"\");\n        require(sent, \"FAILED_TO_WITHDRAW_ETHER\");\n    }\n}\n"
    },
    "contracts/FakeNFTMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract FakeNFTMarketplace {\n    /// @dev Maintain a mapping of Fake TokenID to Owner addresses\n    mapping(uint256 => address) public tokens;\n    /// @dev Set the purchase price for each Fake NFT\n    uint256 public nftPrice = 0.1 ether;\n\n    /// @dev purchase() accepts ETH and marks the owner of the given tokenId as the caller address\n    /// @param _tokenId - the fake NFT token Id to purchase\n    function purchase(uint256 _tokenId) external payable {\n        require(msg.value >= nftPrice, \"This NFT costs 0.1 ether\");\n        tokens[_tokenId] = msg.sender;\n    }\n\n    /// @dev available() checks whether the given tokenId has already been sold or not\n    /// @param _tokenId - the tokenId to check for\n    function available(uint256 _tokenId) external view returns (bool) {\n        // address(0) = 0x0000000000000000000000000000000000000000\n        // This is the default value for addresses in Solidity\n        if (tokens[_tokenId] == address(0)) {\n            return true;\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/interfaces/ICryptoDevsNFT.sol": {
      "content": "interface ICryptoDevsNFT {\n    /// @dev balanceOf returns the number of NFTs owned by the given address\n    /// @param owner - address to fetch number of NFTs for\n    /// @return Returns the number of NFTs owned\n    function balanceOf(address owner) external view returns (uint256);\n\n    /// @dev tokenOfOwnerByIndex returns a tokenID at given index for owner\n    /// @param owner - address to fetch the NFT TokenID for\n    /// @param index - index of NFT in owned tokens array to fetch\n    /// @return Returns the TokenID of the NFT\n    function tokenOfOwnerByIndex(\n        address owner,\n        uint256 index\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IFakeNFTMarketplace.sol": {
      "content": "interface IFakeNFTMarketplace {\n    /// @dev getPrice() returns the price of an NFT from the FakeNFTMarketplace\n    /// @return Returns the price in Wei for an NFT\n    function getPrice() external view returns (uint256);\n\n    /// @dev available() returns whether or not the given _tokenId has already been purchased\n    /// @return Returns a boolean value - true if available, false if not\n    function available(uint256 _tokenId) external view returns (bool);\n\n    /// @dev purchase() purchases an NFT from the FakeNFTMarketplace\n    /// @param _tokenId - the fake NFT tokenID to purchase\n    function purchase(uint256 _tokenId) external payable;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}